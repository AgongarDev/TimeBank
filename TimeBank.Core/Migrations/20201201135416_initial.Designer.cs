// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TimeBank.Core.DataAccess;

namespace TimeBank.Core.Migrations
{
    [DbContext(typeof(TimeBankContext))]
    [Migration("20201201135416_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("TimeBank.Core.Models.Address", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("PostalCode")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeStreet")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("TimeBank.Core.Models.Category", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("TimeBank.Core.Models.Comment", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("IncidenceID")
                        .HasColumnType("bigint");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("IncidenceID");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("TimeBank.Core.Models.Incidence", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("ServiceID")
                        .HasColumnType("bigint");

                    b.Property<bool>("Solved")
                        .HasColumnType("bit");

                    b.Property<long?>("ValidationID")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("ServiceID");

                    b.HasIndex("ValidationID");

                    b.ToTable("Incidences");
                });

            modelBuilder.Entity("TimeBank.Core.Models.Payment", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<int>("PaymentType")
                        .HasColumnType("int");

                    b.Property<long>("TBankUserID")
                        .HasColumnType("bigint");

                    b.Property<long>("ValidationId")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("TBankUserID");

                    b.HasIndex("ValidationId")
                        .IsUnique();

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("TimeBank.Core.Models.Service", b =>
                {
                    b.Property<long>("ServiceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<bool>("Available")
                        .HasColumnType("bit");

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ProviderID")
                        .HasColumnType("bigint");

                    b.HasKey("ServiceID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("ProviderID");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("TimeBank.Core.Models.Token", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Hours")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ServiceID")
                        .HasColumnType("bigint");

                    b.Property<long?>("WalletID")
                        .HasColumnType("bigint");

                    b.Property<long?>("WalletID1")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("ServiceID");

                    b.HasIndex("WalletID");

                    b.HasIndex("WalletID1");

                    b.ToTable("Token");
                });

            modelBuilder.Entity("TimeBank.Core.Models.User", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long>("AddressId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Admin")
                        .HasColumnType("bit");

                    b.Property<DateTime>("InDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OutDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.HasKey("UserId");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.ToTable("User");
                });

            modelBuilder.Entity("TimeBank.Core.Models.Validation", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long>("ServiceID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ServiceUsedOn")
                        .HasColumnType("datetime2");

                    b.Property<long>("TBankUserID")
                        .HasColumnType("bigint");

                    b.Property<bool>("Validated")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ValidatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("ServiceID")
                        .IsUnique();

                    b.HasIndex("TBankUserID");

                    b.ToTable("Validations");
                });

            modelBuilder.Entity("TimeBank.Core.Models.Wallet", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<int>("MaxDebit")
                        .HasColumnType("int");

                    b.Property<int>("MinCredit")
                        .HasColumnType("int");

                    b.Property<long>("TBankUserID")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("TBankUserID")
                        .IsUnique();

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("TimeBank.Core.Models.Comment", b =>
                {
                    b.HasOne("TimeBank.Core.Models.Incidence", "Incidence")
                        .WithMany("Comments")
                        .HasForeignKey("IncidenceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TimeBank.Core.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Incidence");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TimeBank.Core.Models.Incidence", b =>
                {
                    b.HasOne("TimeBank.Core.Models.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TimeBank.Core.Models.Validation", null)
                        .WithMany("Incidences")
                        .HasForeignKey("ValidationID");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("TimeBank.Core.Models.Payment", b =>
                {
                    b.HasOne("TimeBank.Core.Models.User", "User")
                        .WithMany("Payments")
                        .HasForeignKey("TBankUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TimeBank.Core.Models.Validation", "Validation")
                        .WithOne("Paid")
                        .HasForeignKey("TimeBank.Core.Models.Payment", "ValidationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Validation");
                });

            modelBuilder.Entity("TimeBank.Core.Models.Service", b =>
                {
                    b.HasOne("TimeBank.Core.Models.Category", "Category")
                        .WithMany("Services")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TimeBank.Core.Models.User", "Provider")
                        .WithMany("ProvideServices")
                        .HasForeignKey("ProviderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("TimeBank.Core.Models.Token", b =>
                {
                    b.HasOne("TimeBank.Core.Models.Service", null)
                        .WithMany("Price")
                        .HasForeignKey("ServiceID");

                    b.HasOne("TimeBank.Core.Models.Wallet", null)
                        .WithMany("Credit")
                        .HasForeignKey("WalletID");

                    b.HasOne("TimeBank.Core.Models.Wallet", null)
                        .WithMany("Debit")
                        .HasForeignKey("WalletID1");
                });

            modelBuilder.Entity("TimeBank.Core.Models.User", b =>
                {
                    b.HasOne("TimeBank.Core.Models.Address", "Address")
                        .WithOne("user")
                        .HasForeignKey("TimeBank.Core.Models.User", "AddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("TimeBank.Core.Models.Validation", b =>
                {
                    b.HasOne("TimeBank.Core.Models.Service", "Service")
                        .WithOne("Validation")
                        .HasForeignKey("TimeBank.Core.Models.Validation", "ServiceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TimeBank.Core.Models.User", "User")
                        .WithMany("Validations")
                        .HasForeignKey("TBankUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Service");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TimeBank.Core.Models.Wallet", b =>
                {
                    b.HasOne("TimeBank.Core.Models.User", "User")
                        .WithOne("Wallet")
                        .HasForeignKey("TimeBank.Core.Models.Wallet", "TBankUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TimeBank.Core.Models.Address", b =>
                {
                    b.Navigation("user");
                });

            modelBuilder.Entity("TimeBank.Core.Models.Category", b =>
                {
                    b.Navigation("Services");
                });

            modelBuilder.Entity("TimeBank.Core.Models.Incidence", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("TimeBank.Core.Models.Service", b =>
                {
                    b.Navigation("Price");

                    b.Navigation("Validation");
                });

            modelBuilder.Entity("TimeBank.Core.Models.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Payments");

                    b.Navigation("ProvideServices");

                    b.Navigation("Validations");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("TimeBank.Core.Models.Validation", b =>
                {
                    b.Navigation("Incidences");

                    b.Navigation("Paid");
                });

            modelBuilder.Entity("TimeBank.Core.Models.Wallet", b =>
                {
                    b.Navigation("Credit");

                    b.Navigation("Debit");
                });
#pragma warning restore 612, 618
        }
    }
}
